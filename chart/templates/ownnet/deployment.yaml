{{- if .Values.run.ownnet -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: ton-ownnet-deployment
  labels:
    app: ton-ownnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ton-ownnet
  template:
    metadata:
      labels:
        app: ton-ownnet
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      containers:
      - name: ton-ownnet-validator
        image: "{{ .Values.registry }}/{{ .Values.images.tonFullNode.name }}:{{ .Values.images.tonFullNode.version }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.customEnv.ownnetFullNode.PUBLIC_PORT }}
          protocol: UDP
        - containerPort: {{ .Values.customEnv.ownnetFullNode.CONSOLE_PORT }}
          protocol: TCP
        - containerPort: {{ .Values.customEnv.ownnetFullNode.LITESERVER_PORT }}
          protocol: TCP
        env:
          - name: PUBLIC_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.PUBLIC_PORT }}"
          - name: CONSOLE_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.CONSOLE_PORT }}"
          - name: LITESERVER_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.LITESERVER_PORT }}"
          - name: NAMESPACE
            value: "{{ .Values.namespace }}"
          - name: SERVICE_ACCOUNT
            value: "{{ .Values.serviceAccount.name }}"
          - name: GENESIS_VALIDATOR
            value: "true"
          - name: PRIVATE_CONFIG
            value: "true"
          - name: AUTO_VALIDATOR
            value: "true"
          {{- toYaml .Values.customEnv.ownnetFullNode.env | nindent 10 }}
        volumeMounts:
          - mountPath: "/var/ton-work/db/"
            name: ton-ownnet-database
            subPath: db
          - mountPath: "/var/ton-work/network/"
            name: ton-ownnet-database
            subPath: network
          - name: secret-volume
            readOnly: true
            mountPath: "/etc/secret-volume"
      initContainers:
        - name: ton-genesis-ownnet
          image: "{{ .Values.registry }}/{{ .Values.images.tonFullNode.name }}:{{ .Values.images.tonFullNode.version }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
          - name: PUBLIC_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.PUBLIC_PORT }}"
          - name: CONSOLE_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.CONSOLE_PORT }}"
          - name: LITESERVER_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.LITESERVER_PORT }}"
          - name: NAMESPACE
            value: "{{ .Values.namespace }}"
          - name: SERVICE_ACCOUNT
            value: "{{ .Values.serviceAccount.name }}"
          - name: DHT_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.DHT_PORT }}"
          - name: PRIVATE_CONFIG
            value: "false"
          - name: GENESIS
            value: "true"
          volumeMounts:
            - mountPath: "/var/ton-work/db/"
              name: ton-ownnet-database
              subPath: db
            - mountPath: "/var/ton-work/network/"
              name: ton-ownnet-database
              subPath: network
            - name: secret-volume
              readOnly: true
              mountPath: "/etc/secret-volume"
      volumes:
        - name: ton-ownnet-database
          persistentVolumeClaim:
            claimName: ton-ownnet-database
        - name: secret-volume
          secret:
            secretName: {{ .Values.serviceAccount.name }}-token-secret
      {{- toYaml .Values.nodeSelector.ownnet | nindent 6 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: ton-ownnet-deployment-http
  labels:
    app: ton-ownnet-http
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ton-ownnet-http
  template:
    metadata:
      labels:
        app: ton-ownnet-http
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      containers:
      - name: ton-http-config-ownnet
        image: "{{ .Values.registry }}/{{ .Values.images.httpConfig.name }}:{{ .Values.images.httpConfig.version }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.customEnv.ownnetHttpConfig.PUBLIC_PORT }}
          protocol: TCP
        env:
          - name: PUBLIC_PORT
            value: "{{ .Values.customEnv.ownnetHttpConfig.PUBLIC_PORT }}"
          {{- toYaml .Values.customEnv.ownnetFullNode.env | nindent 10 }}
        volumeMounts:
          - mountPath: "/var/ton-work/network/"
            name: ton-ownnet-database
            subPath: network
      volumes:
        - name: ton-ownnet-database
          persistentVolumeClaim:
            claimName: ton-ownnet-database
        - name: secret-volume
          secret:
            secretName: {{ .Values.serviceAccount.name }}-token-secret
      {{- toYaml .Values.nodeSelector.ownnet | nindent 6 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: ton-ownnet-deployment-dht
  labels:
    app: ton-ownnet-dht
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ton-ownnet-dht
  template:
    metadata:
      labels:
        app: ton-ownnet-dht
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      containers:
      - name: ton-ownnet-dht
        image: "{{ .Values.registry }}/{{ .Values.images.tonFullNode.name }}:{{ .Values.images.tonFullNode.version }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.customEnv.ownnetFullNode.DHT_PORT }}
          protocol: UDP
        env:
          - name: PUBLIC_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.PUBLIC_PORT }}"
          - name: CONSOLE_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.CONSOLE_PORT }}"
          - name: LITESERVER_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.LITESERVER_PORT }}"
          - name: NAMESPACE
            value: "{{ .Values.namespace }}"
          - name: SERVICE_ACCOUNT
            value: "{{ .Values.serviceAccount.name }}"
          - name: DHT_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.DHT_PORT }}"
          - name: PRIVATE_CONFIG
            value: "true"
          {{- toYaml .Values.customEnv.ownnetFullNode.env | nindent 10 }}
        volumeMounts:
          - mountPath: "/var/ton-work/db/"
            name: ton-ownnet-database
            subPath: db
          - mountPath: "/var/ton-work/network/"
            name: ton-ownnet-database
            subPath: network
          - name: secret-volume
            readOnly: true
            mountPath: "/etc/secret-volume"
      volumes:
        - name: ton-ownnet-database
          persistentVolumeClaim:
            claimName: ton-ownnet-database
        - name: secret-volume
          secret:
            secretName: {{ .Values.serviceAccount.name }}-token-secret
      {{- toYaml .Values.nodeSelector.ownnet | nindent 6 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: ton-ownnet-toncenter
  labels:
    app: ton-ownnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ton-ownnet
  template:
    metadata:
      labels:
        app: ton-ownnet
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      containers:
      - name: ton-toncenter-ownnet
        image: "{{ .Values.registry }}/{{ .Values.images.toncenter.name }}:{{ .Values.images.toncenter.version }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.customEnv.ownnetToncenter.PUBLIC_PORT }}
          protocol: TCP
        env:
          - name: PUBLIC_PORT
            value: "{{ .Values.customEnv.ownnetToncenter.PUBLIC_PORT }}"
          - name: CONFIG
            value: "{{ .Values.customEnv.ownnetToncenter.CONFIG }}"
          {{- toYaml .Values.customEnv.ownnetToncenter.env | nindent 10 }}
      {{- toYaml .Values.nodeSelector.ownnet | nindent 6 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: ton-ownnet-nodes
  labels:
    app: ton-ownnet-nodes
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ton-ownnet-nodes
  template:
    metadata:
      labels:
        app: ton-ownnet-nodes
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - nodeSelectorTerms:
                - matchExpressions:
                    - key: name
                      operator: In
                      values:
                        - s1kube
                        - s3kube
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - ton-ownnet-node
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: {{ .Values.serviceAccount.name }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      containers:
      - name: ton-ownnet-validator
        image: "{{ .Values.registry }}/{{ .Values.images.tonFullNode.name }}:{{ .Values.images.tonFullNode.version }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.customEnv.ownnetFullNode.VALIDATOR_PUBLIC_PORT }}
          protocol: UDP
        - containerPort: {{ .Values.customEnv.ownnetFullNode.VALIDATOR_CONSOLE_PORT }}
          protocol: UDP
        - containerPort: {{ .Values.customEnv.ownnetFullNode.VALIDATOR_LITESERVER_PORT }}
          protocol: UDP
        env:
          - name: PUBLIC_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.VALIDATOR_PUBLIC_PORT }}"
          - name: CONSOLE_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.VALIDATOR_CONSOLE_PORT }}"
          - name: LITESERVER_PORT
            value: "{{ .Values.customEnv.ownnetFullNode.VALIDATOR_LITESERVER_PORT }}"
          - name: NAMESPACE
            value: "{{ .Values.namespace }}"
          - name: SERVICE_ACCOUNT
            value: "{{ .Values.serviceAccount.name }}"
          - name: CONFIG
            value: "{{ .Values.customEnv.ownnetToncenter.CONFIG }}"
          - name: AUTO_VALIDATOR
            value: "true"
          - name: IP_GET_MODE
            value: "docker"
          {{- toYaml .Values.customEnv.ownnetFullNode.env | nindent 10 }}
        volumeMounts:
          - name: secret-volume
            readOnly: true
            mountPath: "/etc/secret-volume"
      volumes:
        - name: ton-ownnet-database
          persistentVolumeClaim:
            claimName: ton-ownnet-database
        - name: secret-volume
          secret:
            secretName: {{ .Values.serviceAccount.name }}-token-secret
---
{{- end }}
