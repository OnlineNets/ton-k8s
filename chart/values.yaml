registry: registry.head-labs.com
imagePullPolicy: Always
namespace: ton

# what services to run
run:
  mainnet: false
  testnet: true
  ownnet: false

# By default we create volume and mount it to /var/ton-work/db
persistent:
  tonFullNode:
    storageClassName: manual
    storageSize: 100Gi

  testnetFullNode:
    storageClassName: manual
    storageSize: 100Gi

serviceAccount:
  create: true
  name: "ton"

# Your docker registry keys
imagePullSecrets:
  - name: regcred

images:
  tonFullNode:
    name: ton/ton-node
    version: mainnet-v1

  testnetFullNode:
    name: ton/ton-node
    version: testnet-v1

  httpConfig:
    name: ton/ton-http-config
    version: v1

  toncenter:
    name: ton/ton-toncenter
    version: mainnet-v1

  testnetToncenter:
    name: ton/ton-toncenter
    version: testnet-v1

# Here we use node-ports to auto open ports in nodes
ports:
  # MAINNET
  tonFullNode:
    CONSOLE_PORT: 30001
    PUBLIC_PORT: 30002
    LITESERVER_PORT: 30003
    CONFIG: https://newton-blockchain.github.io/global.config.json
    VERBOSE: 3

  # TESTNET
  testnetFullNode:
    CONSOLE_PORT: 30004
    PUBLIC_PORT: 30005
    LITESERVER_PORT: 30006
    CONFIG: https://newton-blockchain.github.io/testnet-global.config.json
    VERBOSE: 3

  httpConfig:
    PUBLIC_PORT: 8081 # this is only local port of application will be run

  testnetHttpConfig:
    PUBLIC_PORT: 8082 # this is only local port of application will be run

  toncenter:
    PUBLIC_PORT: 8083 # this is only local port of application will be run

  testnetToncenter:
    PUBLIC_PORT: 8084 # this is only local port of application will be run
    CONFIG: https://http-config.testnet.ton.head-labs.com/config-local.json



ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  hosts:
    testnetHttpConfig: http-config.testnet.ton.head-labs.com
    testnetToncenter: toncenter.testnet.ton.head-labs.com